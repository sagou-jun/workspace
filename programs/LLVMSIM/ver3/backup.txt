  for(OPList::iterator OPLIST_ite = OPLIST->begin(),OPLIST_ite_end = OPLIST->end();
      OPLIST_ite != OPLIST_ite_end;
      OPLIST_ite++)
    {
      switch((*OPLIST_ite).getOPCODE()){
      case ADD:
	//cerr<<"ADD"<<endl;/*debug*/
	if((*OPLIST_ite).getNumOPRs() == 3)/*レジスタへの代入*/
	  {
	    PC++;
	    for(int i = 0;i < (*OPLIST_ite).getNumOPRs();i++)
	      {
		if((*OPLIST_ite).checkImm(i))
		  value[i] = (*OPLIST_ite).getImm(i);
		else
		  value[i] = RegLookUp((*OPLIST_ite).getOperand(1))->getValue();
	      }
	    OP[0]->setValue(value[1]+value[2]);
	  }
	break;
      case SUB:
	//cerr<<"SUB"<<endl;/*debug*/
	if((*OPLIST_ite).getNumOPRs() == 3)/*レジスタへの代入*/
	  {
	    PC++;
	    for(int i = 0;i < (*OPLIST_ite).getNumOPRs();i++)
	      {
		if((*OPLIST_ite).checkImm(i))
		  value[i] = (*OPLIST_ite).getImm(i);
		else
		  value[i] = RegLookUp((*OPLIST_ite).getOperand(1))->getValue();
	      }
	    OP[0]->setValue(value[1]-value[2]);
	  }
	break;
      case MUL:
	//cerr<<"MUL"<<endl;/*debug*/
	if((*OPLIST_ite).getNumOPRs() == 3)/*レジスタへの代入*/
	  {
	    PC++;
	    for(int i = 0;i < (*OPLIST_ite).getNumOPRs();i++)
	      {
		if((*OPLIST_ite).checkImm(i))
		  value[i] = (*OPLIST_ite).getImm(i);
		else
		  value[i] = RegLookUp((*OPLIST_ite).getOperand(1))->getValue();
	      }
	    OP[0]->setValue(value[1]*value[2]);
	  }
	break;
      case UDIV:
	//cerr<<"UDIV"<<endl;/*debug*/
	if((*OPLIST_ite).getNumOPRs() == 3)/*レジスタへの代入*/
	  {
	    PC++;
	    for(int i = 0;i < (*OPLIST_ite).getNumOPRs();i++)
	      {
		if((*OPLIST_ite).checkImm(i))
		  value[i] = (*OPLIST_ite).getImm(i);
		else
		  value[i] = RegLookUp((*OPLIST_ite).getOperand(1))->getValue();
	      }
	    if(value[2] == 0)
	      {
		cerr<<"UDIV::0 div"<<endl;
		exit(1);
	      }
	    OP[0]->setValue(value[1]/value[2]);
	  }
	break;
      case ALLOC:
	//cerr<<"ALLOC"<<endl;
	if((*OPLIST_ite).getNumOPRs() == 2)
	  {
	    PC++;
	    OP[0] = RegLookUp((*OPLIST_ite).getOperand(0));
	    if((*OPLIST_ite).checkImm(1))
	      {
		value[1] = (*OPLIST_ite).getImm(1);
		OP[0]->setAddress(Mem->myAlloc(value[1]));
	      }
	    else
	      {
		OP[1] = RegLookUp((*OPLIST_ite).getOperand(1));
		OP[0]->setAddress(Mem->myAlloc(OP[1]->getValue()));
	      }
	  }
	break;
      case STORE:
	//cerr<<"STORE"<<endl;
	if((*OPLIST_ite).getNumOPRs() == 2)
	  {
	    PC++;
	    OP[0] = RegLookUp((*OPLIST_ite).getOperand(0));
	    if((*OPLIST_ite).checkImm(1))
	      {
		value[1] = (*OPLIST_ite).getImm(1);
		Mem->setData(OP[0]->getAddress(),value[1]);
	      }
	    else
	      {
		OP[1] = RegLookUp((*OPLIST_ite).getOperand(1));
		Mem->setData(OP[0]->getAddress(),OP[1]->getValue());
	      }
	  }
	break;
      case LOAD:
	//cerr<<"LOAD"<<endl;
	if((*OPLIST_ite).getNumOPRs() == 2)
	  {
	    PC++;
	    OP[0] = RegLookUp((*OPLIST_ite).getOperand(0));
	    OP[1] = RegLookUp((*OPLIST_ite).getOperand(1));
	    OP[0]->setValue(Mem->getData(OP[1]->getAddress()));
	  }
	break;
      default:
	cerr<<"undefine Oprations"<<endl;
      }
    }
  
  return ;
}



/*命令リストの要素*/
class OPListELE{
 private:
  unsigned OPCODE;	/*命令判別用コード*/
  unsigned OP[3];	/*オペランド*/
  class Imm{
    double value;
    bool valid;
  public:
    Imm(){value = 0;valid = false;};
    Imm(double d){value = d;valid = true;};
    void setValue(double d){value = d;};
    void setValid(bool t){valid = t;};
    double getValue(){return value;};
    bool getValid(){return valid;};
  };
  Imm imm[3];		/*即値*/
  unsigned NumOPRs;	/*オペランドの数*/
 
 public:
  OPListELE();
  OPListELE(unsigned opcode,unsigned op1,unsigned op2,unsigned op3,unsigned Numoprs);
  //~OPListELE();
  unsigned getNumOPRs(){return NumOPRs;};
  unsigned getOPCODE(){return OPCODE;};
  unsigned getOperand(unsigned i);/*数字は1から*/
  void setNumOPRs(unsigned numoprs){NumOPRs = numoprs;};
  void setOperand(unsigned op,unsigned i);
  void setOperand(unsigned op1,unsigned op2,unsigned op3){OP[0] = op1;OP[1] = op2;OP[2] = op3;};
  void setOPCODE(unsigned opcode){OPCODE = opcode;};
  double getImm(unsigned i){return imm[i].getValue();};
  bool checkImm(unsigned i){return imm[i].getValid();};
  void setImm(double v,unsigned i);
  void print();
};
