夏休み課題に関するレポート
081330774　佐合　惇

iceでのコンパイル方法
以下のコマンドでコンパイルした。
make

ソースの説明
ヘッダファイルを一つとソースファイルを二つ作成し、分割コンパイルした。
ボールやブロックなどのデータを管理する構造体を作成した。
**構造体**
タグ名：struct BLC
説明　：ブロックの位置(x,y)と長さ、ブロックを表す文字列、線形リストの次の要素へのポインタをメンバーに持つ。

タグ名：struct BALL
説明　：ボールの位置(x,y)と速度(x,y)とボールを表す文字変数をメンバーに持つ。

タグ名：struct BAR
説明　：ラケットの位置(x,y)と長さ、ラケットを表す文字列をメンバーに持つ。

タグ名：struct member
説明　：ハイスコアを記録した人の、スコアと名前を記録する構造体。
****

作成した関数を簡単に説明する。
**関数**

形式：int BLC_HIT(struct BALL *ball,struct BLC **list)
機能：ボールがブロックにぶつかったかどうかを判定し、処理を行う関数。
　　：ボールがブロックの上下面にぶつかったときと、側面にぶつかったときで、ボールの反射の仕方が異なる。
　　：ブロックとボールがぶつかると、ボールを反射し、ブロックを線形リストから削除する。


形式：int BAR_HIT(struct BALL *ball,struct BAR *bar)
機能：ボールがラケットにぶつかったかどうかを判定し、処理を行う関数。
　　：ボールとラケットがぶつかるとボールを反射する。ラケットの端にぶつかったときとそれ以外で反射の仕方が異なる。


形式：int ob_init(struct BALL *ball,struct BLC **list,struct BAR *bar)
機能：ブロック・ボール・ラケットと画面のレイアウトを初期化する関数。
　　：ブロックを画面の大きさに応じた数線形リストに追加する。
　　：また、画面の枠を画面に適切に配置する。


形式：void bar_limit(struct BAR *bar)
機能：ラケットの横の移動を制限する関数。


形式：void reset(struct BALL *ball,struct BAR *bar)
機能：ボールの位置を初期化する関数。ボールの位置を現在のラケットの位置にあわせる


形式：void ball_limit(struct BALL *ball)
機能：ボールの画面端の反射を処理する関数


形式：void gameover(int score)
機能：ゲームオーバー画面を表示する。プレイヤーのスコアも表示する。


形式：int title()
機能：タイトル画面を表示する。LEVELを選択する。


形式：void highscore(int score)
機能：ハイスコアのファイル入出力を行う関数。
　　：ハイスコアを過去上位５位をインサートソートで降順にソートし、ファイルに記録する。
****
以上をballgame.cのソースファイルに記述した。
またこれらの構造体の宣言と関数のプロトタイプ宣言はballgame.hで行った。

block.cのソースファイルの説明
メイン関数と、ゲームの処理を行う関数game()を記述した。
LEVELは三段階に分かれていて、LEVELが高くなるほど、ブロックを壊したときのスコアが高くなり、ボールの速度が上昇し、ラケットが短くなる。
ボールがラケットよりある程度下に到達すると残りのボールの数を一つ減らし、ボールの位置をリセットする。
ボールの位置をリセットしたときに、SPACE KEYを押すまでボールは発射されない。また、このときボールが飛んでいく方向はボールがリセットされる直前の入力によって変わる。4
どうしてもクリアできないときのために、'r'を入力すると残りのボールの数が回復する。
