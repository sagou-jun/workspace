// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef SHIM_HXX
#define SHIM_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class ComponentSet;
class SlaveComponent;
class MasterComponent;
class RWType;
class AddressSpaceSet;
class AddressSpace;
class SubSpace;
class MasterType;
class Instruction;
class AbstractCommunication;
class InterruptCommunication;
class AbstractPerformance;
class Latency;
class Pitch;
class MasterSlaveBinding;
class CommunicationSet;
class Connection;
class PerformanceSet;
class FIFOCommunication;
class CommonInstructionSet;
class Cache;
class SystemConfiguration;
class ConnectionSet;
class CacheCoherencyType;
class MemoryConsistencyModel;
class OrderingType;
class EndianType;
class SharedRegisterCommunication;
class SharedMemoryCommunication;
class EventCommunication;
class ClockFrequency;
class Accessor;
class AccessType;
class MasterSlaveBindingSet;
class CacheType;
class Performance;
class AccessTypeSet;
class SizeUnitType;
class LockDownType;
class OperationType;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class ComponentSet: public ::xml_schema::type
{
  public:
  // ComponentSet
  //
  typedef ::ComponentSet ComponentSet1_type;
  typedef ::xsd::cxx::tree::sequence< ComponentSet1_type > ComponentSet1_sequence;
  typedef ComponentSet1_sequence::iterator ComponentSet1_iterator;
  typedef ComponentSet1_sequence::const_iterator ComponentSet1_const_iterator;
  typedef ::xsd::cxx::tree::traits< ComponentSet1_type, char > ComponentSet1_traits;

  const ComponentSet1_sequence&
  ComponentSet1 () const;

  ComponentSet1_sequence&
  ComponentSet1 ();

  void
  ComponentSet1 (const ComponentSet1_sequence& s);

  // SlaveComponent
  //
  typedef ::SlaveComponent SlaveComponent_type;
  typedef ::xsd::cxx::tree::sequence< SlaveComponent_type > SlaveComponent_sequence;
  typedef SlaveComponent_sequence::iterator SlaveComponent_iterator;
  typedef SlaveComponent_sequence::const_iterator SlaveComponent_const_iterator;
  typedef ::xsd::cxx::tree::traits< SlaveComponent_type, char > SlaveComponent_traits;

  const SlaveComponent_sequence&
  SlaveComponent () const;

  SlaveComponent_sequence&
  SlaveComponent ();

  void
  SlaveComponent (const SlaveComponent_sequence& s);

  // MasterComponent
  //
  typedef ::MasterComponent MasterComponent_type;
  typedef ::xsd::cxx::tree::sequence< MasterComponent_type > MasterComponent_sequence;
  typedef MasterComponent_sequence::iterator MasterComponent_iterator;
  typedef MasterComponent_sequence::const_iterator MasterComponent_const_iterator;
  typedef ::xsd::cxx::tree::traits< MasterComponent_type, char > MasterComponent_traits;

  const MasterComponent_sequence&
  MasterComponent () const;

  MasterComponent_sequence&
  MasterComponent ();

  void
  MasterComponent (const MasterComponent_sequence& s);

  // Cache
  //
  typedef ::Cache Cache_type;
  typedef ::xsd::cxx::tree::sequence< Cache_type > Cache_sequence;
  typedef Cache_sequence::iterator Cache_iterator;
  typedef Cache_sequence::const_iterator Cache_const_iterator;
  typedef ::xsd::cxx::tree::traits< Cache_type, char > Cache_traits;

  const Cache_sequence&
  Cache () const;

  Cache_sequence&
  Cache ();

  void
  Cache (const Cache_sequence& s);

  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // Constructors.
  //
  ComponentSet (const name_type&);

  ComponentSet (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  ComponentSet (const ComponentSet& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual ComponentSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ComponentSet&
  operator= (const ComponentSet& x);

  virtual 
  ~ComponentSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ComponentSet1_sequence ComponentSet1_;
  SlaveComponent_sequence SlaveComponent_;
  MasterComponent_sequence MasterComponent_;
  Cache_sequence Cache_;
  ::xsd::cxx::tree::one< name_type > name_;
};

class SlaveComponent: public ::xml_schema::type
{
  public:
  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // id
  //
  typedef ::xml_schema::id id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  void
  id (::std::auto_ptr< id_type > p);

  // size
  //
  typedef ::xml_schema::int_ size_type;
  typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

  const size_type&
  size () const;

  size_type&
  size ();

  void
  size (const size_type& x);

  // sizeUnit
  //
  typedef ::SizeUnitType sizeUnit_type;
  typedef ::xsd::cxx::tree::traits< sizeUnit_type, char > sizeUnit_traits;

  const sizeUnit_type&
  sizeUnit () const;

  sizeUnit_type&
  sizeUnit ();

  void
  sizeUnit (const sizeUnit_type& x);

  void
  sizeUnit (::std::auto_ptr< sizeUnit_type > p);

  // rwType
  //
  typedef ::RWType rwType_type;
  typedef ::xsd::cxx::tree::traits< rwType_type, char > rwType_traits;

  const rwType_type&
  rwType () const;

  rwType_type&
  rwType ();

  void
  rwType (const rwType_type& x);

  void
  rwType (::std::auto_ptr< rwType_type > p);

  // Constructors.
  //
  SlaveComponent (const name_type&,
                  const id_type&,
                  const size_type&,
                  const sizeUnit_type&,
                  const rwType_type&);

  SlaveComponent (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  SlaveComponent (const SlaveComponent& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual SlaveComponent*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SlaveComponent&
  operator= (const SlaveComponent& x);

  virtual 
  ~SlaveComponent ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< size_type > size_;
  ::xsd::cxx::tree::one< sizeUnit_type > sizeUnit_;
  ::xsd::cxx::tree::one< rwType_type > rwType_;
};

class MasterComponent: public ::xml_schema::type
{
  public:
  // CommonInstructionSet
  //
  typedef ::CommonInstructionSet CommonInstructionSet_type;
  typedef ::xsd::cxx::tree::optional< CommonInstructionSet_type > CommonInstructionSet_optional;
  typedef ::xsd::cxx::tree::traits< CommonInstructionSet_type, char > CommonInstructionSet_traits;

  const CommonInstructionSet_optional&
  CommonInstructionSet () const;

  CommonInstructionSet_optional&
  CommonInstructionSet ();

  void
  CommonInstructionSet (const CommonInstructionSet_type& x);

  void
  CommonInstructionSet (const CommonInstructionSet_optional& x);

  void
  CommonInstructionSet (::std::auto_ptr< CommonInstructionSet_type > p);

  // Cache
  //
  typedef ::Cache Cache_type;
  typedef ::xsd::cxx::tree::sequence< Cache_type > Cache_sequence;
  typedef Cache_sequence::iterator Cache_iterator;
  typedef Cache_sequence::const_iterator Cache_const_iterator;
  typedef ::xsd::cxx::tree::traits< Cache_type, char > Cache_traits;

  const Cache_sequence&
  Cache () const;

  Cache_sequence&
  Cache ();

  void
  Cache (const Cache_sequence& s);

  // ClockFrequency
  //
  typedef ::ClockFrequency ClockFrequency_type;
  typedef ::xsd::cxx::tree::optional< ClockFrequency_type > ClockFrequency_optional;
  typedef ::xsd::cxx::tree::traits< ClockFrequency_type, char > ClockFrequency_traits;

  const ClockFrequency_optional&
  ClockFrequency () const;

  ClockFrequency_optional&
  ClockFrequency ();

  void
  ClockFrequency (const ClockFrequency_type& x);

  void
  ClockFrequency (const ClockFrequency_optional& x);

  void
  ClockFrequency (::std::auto_ptr< ClockFrequency_type > p);

  // AccessTypeSet
  //
  typedef ::AccessTypeSet AccessTypeSet_type;
  typedef ::xsd::cxx::tree::traits< AccessTypeSet_type, char > AccessTypeSet_traits;

  const AccessTypeSet_type&
  AccessTypeSet () const;

  AccessTypeSet_type&
  AccessTypeSet ();

  void
  AccessTypeSet (const AccessTypeSet_type& x);

  void
  AccessTypeSet (::std::auto_ptr< AccessTypeSet_type > p);

  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // id
  //
  typedef ::xml_schema::id id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  void
  id (::std::auto_ptr< id_type > p);

  // masterType
  //
  typedef ::MasterType masterType_type;
  typedef ::xsd::cxx::tree::traits< masterType_type, char > masterType_traits;

  const masterType_type&
  masterType () const;

  masterType_type&
  masterType ();

  void
  masterType (const masterType_type& x);

  void
  masterType (::std::auto_ptr< masterType_type > p);

  // arch
  //
  typedef ::xml_schema::string arch_type;
  typedef ::xsd::cxx::tree::traits< arch_type, char > arch_traits;

  const arch_type&
  arch () const;

  arch_type&
  arch ();

  void
  arch (const arch_type& x);

  void
  arch (::std::auto_ptr< arch_type > p);

  // archOption
  //
  typedef ::xml_schema::string archOption_type;
  typedef ::xsd::cxx::tree::optional< archOption_type > archOption_optional;
  typedef ::xsd::cxx::tree::traits< archOption_type, char > archOption_traits;

  const archOption_optional&
  archOption () const;

  archOption_optional&
  archOption ();

  void
  archOption (const archOption_type& x);

  void
  archOption (const archOption_optional& x);

  void
  archOption (::std::auto_ptr< archOption_type > p);

  // pid
  //
  typedef ::xml_schema::string pid_type;
  typedef ::xsd::cxx::tree::optional< pid_type > pid_optional;
  typedef ::xsd::cxx::tree::traits< pid_type, char > pid_traits;

  const pid_optional&
  pid () const;

  pid_optional&
  pid ();

  void
  pid (const pid_type& x);

  void
  pid (const pid_optional& x);

  void
  pid (::std::auto_ptr< pid_type > p);

  // nThread
  //
  typedef ::xml_schema::int_ nThread_type;
  typedef ::xsd::cxx::tree::optional< nThread_type > nThread_optional;
  typedef ::xsd::cxx::tree::traits< nThread_type, char > nThread_traits;

  const nThread_optional&
  nThread () const;

  nThread_optional&
  nThread ();

  void
  nThread (const nThread_type& x);

  void
  nThread (const nThread_optional& x);

  // endian
  //
  typedef ::EndianType endian_type;
  typedef ::xsd::cxx::tree::optional< endian_type > endian_optional;
  typedef ::xsd::cxx::tree::traits< endian_type, char > endian_traits;

  const endian_optional&
  endian () const;

  endian_optional&
  endian ();

  void
  endian (const endian_type& x);

  void
  endian (const endian_optional& x);

  void
  endian (::std::auto_ptr< endian_type > p);

  // Constructors.
  //
  MasterComponent (const AccessTypeSet_type&,
                   const name_type&,
                   const id_type&,
                   const masterType_type&,
                   const arch_type&);

  MasterComponent (::std::auto_ptr< AccessTypeSet_type >,
                   const name_type&,
                   const id_type&,
                   const masterType_type&,
                   const arch_type&);

  MasterComponent (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  MasterComponent (const MasterComponent& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual MasterComponent*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MasterComponent&
  operator= (const MasterComponent& x);

  virtual 
  ~MasterComponent ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  CommonInstructionSet_optional CommonInstructionSet_;
  Cache_sequence Cache_;
  ClockFrequency_optional ClockFrequency_;
  ::xsd::cxx::tree::one< AccessTypeSet_type > AccessTypeSet_;
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< masterType_type > masterType_;
  ::xsd::cxx::tree::one< arch_type > arch_;
  archOption_optional archOption_;
  pid_optional pid_;
  nThread_optional nThread_;
  endian_optional endian_;
};

class RWType: public ::xml_schema::string
{
  public:
  enum value
  {
    RW,
    WX,
    RX,
    R,
    W,
    X,
    RWX
  };

  RWType (value v);

  RWType (const char* v);

  RWType (const ::std::string& v);

  RWType (const ::xml_schema::string& v);

  RWType (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  RWType (const ::xercesc::DOMAttr& a,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  RWType (const ::std::string& s,
          const ::xercesc::DOMElement* e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  RWType (const RWType& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual RWType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  RWType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_RWType_convert ();
  }

  protected:
  value
  _xsd_RWType_convert () const;

  public:
  static const char* const _xsd_RWType_literals_[7];
  static const value _xsd_RWType_indexes_[7];
};

class AddressSpaceSet: public ::xml_schema::type
{
  public:
  // AddressSpace
  //
  typedef ::AddressSpace AddressSpace_type;
  typedef ::xsd::cxx::tree::sequence< AddressSpace_type > AddressSpace_sequence;
  typedef AddressSpace_sequence::iterator AddressSpace_iterator;
  typedef AddressSpace_sequence::const_iterator AddressSpace_const_iterator;
  typedef ::xsd::cxx::tree::traits< AddressSpace_type, char > AddressSpace_traits;

  const AddressSpace_sequence&
  AddressSpace () const;

  AddressSpace_sequence&
  AddressSpace ();

  void
  AddressSpace (const AddressSpace_sequence& s);

  // Constructors.
  //
  AddressSpaceSet ();

  AddressSpaceSet (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  AddressSpaceSet (const AddressSpaceSet& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

  virtual AddressSpaceSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  AddressSpaceSet&
  operator= (const AddressSpaceSet& x);

  virtual 
  ~AddressSpaceSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  AddressSpace_sequence AddressSpace_;
};

class AddressSpace: public ::xml_schema::type
{
  public:
  // SubSpace
  //
  typedef ::SubSpace SubSpace_type;
  typedef ::xsd::cxx::tree::sequence< SubSpace_type > SubSpace_sequence;
  typedef SubSpace_sequence::iterator SubSpace_iterator;
  typedef SubSpace_sequence::const_iterator SubSpace_const_iterator;
  typedef ::xsd::cxx::tree::traits< SubSpace_type, char > SubSpace_traits;

  const SubSpace_sequence&
  SubSpace () const;

  SubSpace_sequence&
  SubSpace ();

  void
  SubSpace (const SubSpace_sequence& s);

  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // id
  //
  typedef ::xml_schema::id id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  void
  id (::std::auto_ptr< id_type > p);

  // Constructors.
  //
  AddressSpace (const name_type&,
                const id_type&);

  AddressSpace (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  AddressSpace (const AddressSpace& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual AddressSpace*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  AddressSpace&
  operator= (const AddressSpace& x);

  virtual 
  ~AddressSpace ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  SubSpace_sequence SubSpace_;
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< id_type > id_;
};

class SubSpace: public ::xml_schema::type
{
  public:
  // MemoryConsistencyModel
  //
  typedef ::MemoryConsistencyModel MemoryConsistencyModel_type;
  typedef ::xsd::cxx::tree::sequence< MemoryConsistencyModel_type > MemoryConsistencyModel_sequence;
  typedef MemoryConsistencyModel_sequence::iterator MemoryConsistencyModel_iterator;
  typedef MemoryConsistencyModel_sequence::const_iterator MemoryConsistencyModel_const_iterator;
  typedef ::xsd::cxx::tree::traits< MemoryConsistencyModel_type, char > MemoryConsistencyModel_traits;

  const MemoryConsistencyModel_sequence&
  MemoryConsistencyModel () const;

  MemoryConsistencyModel_sequence&
  MemoryConsistencyModel ();

  void
  MemoryConsistencyModel (const MemoryConsistencyModel_sequence& s);

  // MasterSlaveBindingSet
  //
  typedef ::MasterSlaveBindingSet MasterSlaveBindingSet_type;
  typedef ::xsd::cxx::tree::optional< MasterSlaveBindingSet_type > MasterSlaveBindingSet_optional;
  typedef ::xsd::cxx::tree::traits< MasterSlaveBindingSet_type, char > MasterSlaveBindingSet_traits;

  const MasterSlaveBindingSet_optional&
  MasterSlaveBindingSet () const;

  MasterSlaveBindingSet_optional&
  MasterSlaveBindingSet ();

  void
  MasterSlaveBindingSet (const MasterSlaveBindingSet_type& x);

  void
  MasterSlaveBindingSet (const MasterSlaveBindingSet_optional& x);

  void
  MasterSlaveBindingSet (::std::auto_ptr< MasterSlaveBindingSet_type > p);

  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // id
  //
  typedef ::xml_schema::id id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  void
  id (::std::auto_ptr< id_type > p);

  // start
  //
  typedef ::xml_schema::long_ start_type;
  typedef ::xsd::cxx::tree::traits< start_type, char > start_traits;

  const start_type&
  start () const;

  start_type&
  start ();

  void
  start (const start_type& x);

  // end
  //
  typedef ::xml_schema::long_ end_type;
  typedef ::xsd::cxx::tree::traits< end_type, char > end_traits;

  const end_type&
  end () const;

  end_type&
  end ();

  void
  end (const end_type& x);

  // endian
  //
  typedef ::EndianType endian_type;
  typedef ::xsd::cxx::tree::optional< endian_type > endian_optional;
  typedef ::xsd::cxx::tree::traits< endian_type, char > endian_traits;

  const endian_optional&
  endian () const;

  endian_optional&
  endian ();

  void
  endian (const endian_type& x);

  void
  endian (const endian_optional& x);

  void
  endian (::std::auto_ptr< endian_type > p);

  // Constructors.
  //
  SubSpace (const name_type&,
            const id_type&,
            const start_type&,
            const end_type&);

  SubSpace (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  SubSpace (const SubSpace& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual SubSpace*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SubSpace&
  operator= (const SubSpace& x);

  virtual 
  ~SubSpace ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  MemoryConsistencyModel_sequence MemoryConsistencyModel_;
  MasterSlaveBindingSet_optional MasterSlaveBindingSet_;
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< start_type > start_;
  ::xsd::cxx::tree::one< end_type > end_;
  endian_optional endian_;
};

class MasterType: public ::xml_schema::string
{
  public:
  enum value
  {
    PU,
    TU,
    OTHER
  };

  MasterType (value v);

  MasterType (const char* v);

  MasterType (const ::std::string& v);

  MasterType (const ::xml_schema::string& v);

  MasterType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MasterType (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MasterType (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  MasterType (const MasterType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual MasterType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MasterType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_MasterType_convert ();
  }

  protected:
  value
  _xsd_MasterType_convert () const;

  public:
  static const char* const _xsd_MasterType_literals_[3];
  static const value _xsd_MasterType_indexes_[3];
};

class Instruction: public ::xml_schema::type
{
  public:
  // Performance
  //
  typedef ::Performance Performance_type;
  typedef ::xsd::cxx::tree::traits< Performance_type, char > Performance_traits;

  const Performance_type&
  Performance () const;

  Performance_type&
  Performance ();

  void
  Performance (const Performance_type& x);

  void
  Performance (::std::auto_ptr< Performance_type > p);

  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // Constructors.
  //
  Instruction (const Performance_type&,
               const name_type&);

  Instruction (::std::auto_ptr< Performance_type >,
               const name_type&);

  Instruction (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  Instruction (const Instruction& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual Instruction*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Instruction&
  operator= (const Instruction& x);

  virtual 
  ~Instruction ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Performance_type > Performance_;
  ::xsd::cxx::tree::one< name_type > name_;
};

class AbstractCommunication: public ::xml_schema::type
{
  public:
  // ConnectionSet
  //
  typedef ::ConnectionSet ConnectionSet_type;
  typedef ::xsd::cxx::tree::optional< ConnectionSet_type > ConnectionSet_optional;
  typedef ::xsd::cxx::tree::traits< ConnectionSet_type, char > ConnectionSet_traits;

  const ConnectionSet_optional&
  ConnectionSet () const;

  ConnectionSet_optional&
  ConnectionSet ();

  void
  ConnectionSet (const ConnectionSet_type& x);

  void
  ConnectionSet (const ConnectionSet_optional& x);

  void
  ConnectionSet (::std::auto_ptr< ConnectionSet_type > p);

  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // Constructors.
  //
  AbstractCommunication (const name_type&);

  AbstractCommunication (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  AbstractCommunication (const AbstractCommunication& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual AbstractCommunication*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  AbstractCommunication&
  operator= (const AbstractCommunication& x);

  virtual 
  ~AbstractCommunication ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ConnectionSet_optional ConnectionSet_;
  ::xsd::cxx::tree::one< name_type > name_;
};

class InterruptCommunication: public ::AbstractCommunication
{
  public:
  // Constructors.
  //
  InterruptCommunication (const name_type&);

  InterruptCommunication (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  InterruptCommunication (const InterruptCommunication& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual InterruptCommunication*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~InterruptCommunication ();
};

class AbstractPerformance: public ::xml_schema::type
{
  public:
  // best
  //
  typedef ::xml_schema::float_ best_type;
  typedef ::xsd::cxx::tree::optional< best_type > best_optional;
  typedef ::xsd::cxx::tree::traits< best_type, char > best_traits;

  const best_optional&
  best () const;

  best_optional&
  best ();

  void
  best (const best_type& x);

  void
  best (const best_optional& x);

  // typical
  //
  typedef ::xml_schema::float_ typical_type;
  typedef ::xsd::cxx::tree::traits< typical_type, char > typical_traits;

  const typical_type&
  typical () const;

  typical_type&
  typical ();

  void
  typical (const typical_type& x);

  // worst
  //
  typedef ::xml_schema::float_ worst_type;
  typedef ::xsd::cxx::tree::optional< worst_type > worst_optional;
  typedef ::xsd::cxx::tree::traits< worst_type, char > worst_traits;

  const worst_optional&
  worst () const;

  worst_optional&
  worst ();

  void
  worst (const worst_type& x);

  void
  worst (const worst_optional& x);

  // Constructors.
  //
  AbstractPerformance (const typical_type&);

  AbstractPerformance (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  AbstractPerformance (const AbstractPerformance& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual AbstractPerformance*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  AbstractPerformance&
  operator= (const AbstractPerformance& x);

  virtual 
  ~AbstractPerformance ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  best_optional best_;
  ::xsd::cxx::tree::one< typical_type > typical_;
  worst_optional worst_;
};

class Latency: public ::AbstractPerformance
{
  public:
  // Constructors.
  //
  Latency (const typical_type&);

  Latency (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  Latency (const Latency& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual Latency*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Latency ();
};

class Pitch: public ::AbstractPerformance
{
  public:
  // Constructors.
  //
  Pitch (const typical_type&);

  Pitch (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Pitch (const Pitch& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual Pitch*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~Pitch ();
};

class MasterSlaveBinding: public ::xml_schema::type
{
  public:
  // Accessor
  //
  typedef ::Accessor Accessor_type;
  typedef ::xsd::cxx::tree::sequence< Accessor_type > Accessor_sequence;
  typedef Accessor_sequence::iterator Accessor_iterator;
  typedef Accessor_sequence::const_iterator Accessor_const_iterator;
  typedef ::xsd::cxx::tree::traits< Accessor_type, char > Accessor_traits;

  const Accessor_sequence&
  Accessor () const;

  Accessor_sequence&
  Accessor ();

  void
  Accessor (const Accessor_sequence& s);

  // slaveComponentRef
  //
  typedef ::xml_schema::idref slaveComponentRef_type;
  typedef ::xsd::cxx::tree::traits< slaveComponentRef_type, char > slaveComponentRef_traits;

  const slaveComponentRef_type&
  slaveComponentRef () const;

  slaveComponentRef_type&
  slaveComponentRef ();

  void
  slaveComponentRef (const slaveComponentRef_type& x);

  void
  slaveComponentRef (::std::auto_ptr< slaveComponentRef_type > p);

  // Constructors.
  //
  MasterSlaveBinding (const slaveComponentRef_type&);

  MasterSlaveBinding (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  MasterSlaveBinding (const MasterSlaveBinding& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual MasterSlaveBinding*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MasterSlaveBinding&
  operator= (const MasterSlaveBinding& x);

  virtual 
  ~MasterSlaveBinding ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Accessor_sequence Accessor_;
  ::xsd::cxx::tree::one< slaveComponentRef_type > slaveComponentRef_;
};

class CommunicationSet: public ::xml_schema::type
{
  public:
  // SharedRegisterCommunication
  //
  typedef ::SharedRegisterCommunication SharedRegisterCommunication_type;
  typedef ::xsd::cxx::tree::sequence< SharedRegisterCommunication_type > SharedRegisterCommunication_sequence;
  typedef SharedRegisterCommunication_sequence::iterator SharedRegisterCommunication_iterator;
  typedef SharedRegisterCommunication_sequence::const_iterator SharedRegisterCommunication_const_iterator;
  typedef ::xsd::cxx::tree::traits< SharedRegisterCommunication_type, char > SharedRegisterCommunication_traits;

  const SharedRegisterCommunication_sequence&
  SharedRegisterCommunication () const;

  SharedRegisterCommunication_sequence&
  SharedRegisterCommunication ();

  void
  SharedRegisterCommunication (const SharedRegisterCommunication_sequence& s);

  // SharedMemoryCommunication
  //
  typedef ::SharedMemoryCommunication SharedMemoryCommunication_type;
  typedef ::xsd::cxx::tree::sequence< SharedMemoryCommunication_type > SharedMemoryCommunication_sequence;
  typedef SharedMemoryCommunication_sequence::iterator SharedMemoryCommunication_iterator;
  typedef SharedMemoryCommunication_sequence::const_iterator SharedMemoryCommunication_const_iterator;
  typedef ::xsd::cxx::tree::traits< SharedMemoryCommunication_type, char > SharedMemoryCommunication_traits;

  const SharedMemoryCommunication_sequence&
  SharedMemoryCommunication () const;

  SharedMemoryCommunication_sequence&
  SharedMemoryCommunication ();

  void
  SharedMemoryCommunication (const SharedMemoryCommunication_sequence& s);

  // EventCommunication
  //
  typedef ::EventCommunication EventCommunication_type;
  typedef ::xsd::cxx::tree::sequence< EventCommunication_type > EventCommunication_sequence;
  typedef EventCommunication_sequence::iterator EventCommunication_iterator;
  typedef EventCommunication_sequence::const_iterator EventCommunication_const_iterator;
  typedef ::xsd::cxx::tree::traits< EventCommunication_type, char > EventCommunication_traits;

  const EventCommunication_sequence&
  EventCommunication () const;

  EventCommunication_sequence&
  EventCommunication ();

  void
  EventCommunication (const EventCommunication_sequence& s);

  // FIFOCommunication
  //
  typedef ::FIFOCommunication FIFOCommunication_type;
  typedef ::xsd::cxx::tree::sequence< FIFOCommunication_type > FIFOCommunication_sequence;
  typedef FIFOCommunication_sequence::iterator FIFOCommunication_iterator;
  typedef FIFOCommunication_sequence::const_iterator FIFOCommunication_const_iterator;
  typedef ::xsd::cxx::tree::traits< FIFOCommunication_type, char > FIFOCommunication_traits;

  const FIFOCommunication_sequence&
  FIFOCommunication () const;

  FIFOCommunication_sequence&
  FIFOCommunication ();

  void
  FIFOCommunication (const FIFOCommunication_sequence& s);

  // InterruptCommunication
  //
  typedef ::InterruptCommunication InterruptCommunication_type;
  typedef ::xsd::cxx::tree::sequence< InterruptCommunication_type > InterruptCommunication_sequence;
  typedef InterruptCommunication_sequence::iterator InterruptCommunication_iterator;
  typedef InterruptCommunication_sequence::const_iterator InterruptCommunication_const_iterator;
  typedef ::xsd::cxx::tree::traits< InterruptCommunication_type, char > InterruptCommunication_traits;

  const InterruptCommunication_sequence&
  InterruptCommunication () const;

  InterruptCommunication_sequence&
  InterruptCommunication ();

  void
  InterruptCommunication (const InterruptCommunication_sequence& s);

  // Constructors.
  //
  CommunicationSet ();

  CommunicationSet (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  CommunicationSet (const CommunicationSet& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

  virtual CommunicationSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  CommunicationSet&
  operator= (const CommunicationSet& x);

  virtual 
  ~CommunicationSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  SharedRegisterCommunication_sequence SharedRegisterCommunication_;
  SharedMemoryCommunication_sequence SharedMemoryCommunication_;
  EventCommunication_sequence EventCommunication_;
  FIFOCommunication_sequence FIFOCommunication_;
  InterruptCommunication_sequence InterruptCommunication_;
};

class Connection: public ::xml_schema::type
{
  public:
  // Performance
  //
  typedef ::Performance Performance_type;
  typedef ::xsd::cxx::tree::sequence< Performance_type > Performance_sequence;
  typedef Performance_sequence::iterator Performance_iterator;
  typedef Performance_sequence::const_iterator Performance_const_iterator;
  typedef ::xsd::cxx::tree::traits< Performance_type, char > Performance_traits;

  const Performance_sequence&
  Performance () const;

  Performance_sequence&
  Performance ();

  void
  Performance (const Performance_sequence& s);

  // from
  //
  typedef ::xml_schema::idref from_type;
  typedef ::xsd::cxx::tree::traits< from_type, char > from_traits;

  const from_type&
  from () const;

  from_type&
  from ();

  void
  from (const from_type& x);

  void
  from (::std::auto_ptr< from_type > p);

  // to
  //
  typedef ::xml_schema::idref to_type;
  typedef ::xsd::cxx::tree::traits< to_type, char > to_traits;

  const to_type&
  to () const;

  to_type&
  to ();

  void
  to (const to_type& x);

  void
  to (::std::auto_ptr< to_type > p);

  // Constructors.
  //
  Connection (const from_type&,
              const to_type&);

  Connection (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  Connection (const Connection& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual Connection*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Connection&
  operator= (const Connection& x);

  virtual 
  ~Connection ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Performance_sequence Performance_;
  ::xsd::cxx::tree::one< from_type > from_;
  ::xsd::cxx::tree::one< to_type > to_;
};

class PerformanceSet: public ::xml_schema::type
{
  public:
  // Performance
  //
  typedef ::Performance Performance_type;
  typedef ::xsd::cxx::tree::sequence< Performance_type > Performance_sequence;
  typedef Performance_sequence::iterator Performance_iterator;
  typedef Performance_sequence::const_iterator Performance_const_iterator;
  typedef ::xsd::cxx::tree::traits< Performance_type, char > Performance_traits;

  const Performance_sequence&
  Performance () const;

  Performance_sequence&
  Performance ();

  void
  Performance (const Performance_sequence& s);

  // Constructors.
  //
  PerformanceSet ();

  PerformanceSet (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  PerformanceSet (const PerformanceSet& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual PerformanceSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  PerformanceSet&
  operator= (const PerformanceSet& x);

  virtual 
  ~PerformanceSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Performance_sequence Performance_;
};

class FIFOCommunication: public ::AbstractCommunication
{
  public:
  // dataSize
  //
  typedef ::xml_schema::int_ dataSize_type;
  typedef ::xsd::cxx::tree::traits< dataSize_type, char > dataSize_traits;

  const dataSize_type&
  dataSize () const;

  dataSize_type&
  dataSize ();

  void
  dataSize (const dataSize_type& x);

  // dataSizeUnit
  //
  typedef ::SizeUnitType dataSizeUnit_type;
  typedef ::xsd::cxx::tree::optional< dataSizeUnit_type > dataSizeUnit_optional;
  typedef ::xsd::cxx::tree::traits< dataSizeUnit_type, char > dataSizeUnit_traits;

  const dataSizeUnit_optional&
  dataSizeUnit () const;

  dataSizeUnit_optional&
  dataSizeUnit ();

  void
  dataSizeUnit (const dataSizeUnit_type& x);

  void
  dataSizeUnit (const dataSizeUnit_optional& x);

  void
  dataSizeUnit (::std::auto_ptr< dataSizeUnit_type > p);

  // queueSize
  //
  typedef ::xml_schema::int_ queueSize_type;
  typedef ::xsd::cxx::tree::traits< queueSize_type, char > queueSize_traits;

  const queueSize_type&
  queueSize () const;

  queueSize_type&
  queueSize ();

  void
  queueSize (const queueSize_type& x);

  // Constructors.
  //
  FIFOCommunication (const name_type&,
                     const dataSize_type&,
                     const queueSize_type&);

  FIFOCommunication (const ::xercesc::DOMElement& e,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  FIFOCommunication (const FIFOCommunication& x,
                     ::xml_schema::flags f = 0,
                     ::xml_schema::container* c = 0);

  virtual FIFOCommunication*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  FIFOCommunication&
  operator= (const FIFOCommunication& x);

  virtual 
  ~FIFOCommunication ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< dataSize_type > dataSize_;
  dataSizeUnit_optional dataSizeUnit_;
  ::xsd::cxx::tree::one< queueSize_type > queueSize_;
};

class CommonInstructionSet: public ::xml_schema::type
{
  public:
  // Instruction
  //
  typedef ::Instruction Instruction_type;
  typedef ::xsd::cxx::tree::sequence< Instruction_type > Instruction_sequence;
  typedef Instruction_sequence::iterator Instruction_iterator;
  typedef Instruction_sequence::const_iterator Instruction_const_iterator;
  typedef ::xsd::cxx::tree::traits< Instruction_type, char > Instruction_traits;

  const Instruction_sequence&
  Instruction () const;

  Instruction_sequence&
  Instruction ();

  void
  Instruction (const Instruction_sequence& s);

  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // Constructors.
  //
  CommonInstructionSet (const name_type&);

  CommonInstructionSet (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  CommonInstructionSet (const CommonInstructionSet& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual CommonInstructionSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  CommonInstructionSet&
  operator= (const CommonInstructionSet& x);

  virtual 
  ~CommonInstructionSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Instruction_sequence Instruction_;
  ::xsd::cxx::tree::one< name_type > name_;
};

class Cache: public ::xml_schema::type
{
  public:
  // cacheRef
  //
  typedef ::xml_schema::idref cacheRef_type;
  typedef ::xsd::cxx::tree::sequence< cacheRef_type > cacheRef_sequence;
  typedef cacheRef_sequence::iterator cacheRef_iterator;
  typedef cacheRef_sequence::const_iterator cacheRef_const_iterator;
  typedef ::xsd::cxx::tree::traits< cacheRef_type, char > cacheRef_traits;

  const cacheRef_sequence&
  cacheRef () const;

  cacheRef_sequence&
  cacheRef ();

  void
  cacheRef (const cacheRef_sequence& s);

  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // id
  //
  typedef ::xml_schema::id id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  void
  id (::std::auto_ptr< id_type > p);

  // cacheType
  //
  typedef ::CacheType cacheType_type;
  typedef ::xsd::cxx::tree::traits< cacheType_type, char > cacheType_traits;

  const cacheType_type&
  cacheType () const;

  cacheType_type&
  cacheType ();

  void
  cacheType (const cacheType_type& x);

  void
  cacheType (::std::auto_ptr< cacheType_type > p);

  // cacheCoherency
  //
  typedef ::CacheCoherencyType cacheCoherency_type;
  typedef ::xsd::cxx::tree::traits< cacheCoherency_type, char > cacheCoherency_traits;

  const cacheCoherency_type&
  cacheCoherency () const;

  cacheCoherency_type&
  cacheCoherency ();

  void
  cacheCoherency (const cacheCoherency_type& x);

  void
  cacheCoherency (::std::auto_ptr< cacheCoherency_type > p);

  // size
  //
  typedef ::xml_schema::int_ size_type;
  typedef ::xsd::cxx::tree::traits< size_type, char > size_traits;

  const size_type&
  size () const;

  size_type&
  size ();

  void
  size (const size_type& x);

  // sizeUnit
  //
  typedef ::SizeUnitType sizeUnit_type;
  typedef ::xsd::cxx::tree::traits< sizeUnit_type, char > sizeUnit_traits;

  const sizeUnit_type&
  sizeUnit () const;

  sizeUnit_type&
  sizeUnit ();

  void
  sizeUnit (const sizeUnit_type& x);

  void
  sizeUnit (::std::auto_ptr< sizeUnit_type > p);

  // nWay
  //
  typedef ::xml_schema::int_ nWay_type;
  typedef ::xsd::cxx::tree::optional< nWay_type > nWay_optional;
  typedef ::xsd::cxx::tree::traits< nWay_type, char > nWay_traits;

  const nWay_optional&
  nWay () const;

  nWay_optional&
  nWay ();

  void
  nWay (const nWay_type& x);

  void
  nWay (const nWay_optional& x);

  // lineSize
  //
  typedef ::xml_schema::int_ lineSize_type;
  typedef ::xsd::cxx::tree::optional< lineSize_type > lineSize_optional;
  typedef ::xsd::cxx::tree::traits< lineSize_type, char > lineSize_traits;

  const lineSize_optional&
  lineSize () const;

  lineSize_optional&
  lineSize ();

  void
  lineSize (const lineSize_type& x);

  void
  lineSize (const lineSize_optional& x);

  // lockDownType
  //
  typedef ::LockDownType lockDownType_type;
  typedef ::xsd::cxx::tree::optional< lockDownType_type > lockDownType_optional;
  typedef ::xsd::cxx::tree::traits< lockDownType_type, char > lockDownType_traits;

  const lockDownType_optional&
  lockDownType () const;

  lockDownType_optional&
  lockDownType ();

  void
  lockDownType (const lockDownType_type& x);

  void
  lockDownType (const lockDownType_optional& x);

  void
  lockDownType (::std::auto_ptr< lockDownType_type > p);

  // Constructors.
  //
  Cache (const name_type&,
         const id_type&,
         const cacheType_type&,
         const cacheCoherency_type&,
         const size_type&,
         const sizeUnit_type&);

  Cache (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  Cache (const Cache& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual Cache*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Cache&
  operator= (const Cache& x);

  virtual 
  ~Cache ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  cacheRef_sequence cacheRef_;
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< cacheType_type > cacheType_;
  ::xsd::cxx::tree::one< cacheCoherency_type > cacheCoherency_;
  ::xsd::cxx::tree::one< size_type > size_;
  ::xsd::cxx::tree::one< sizeUnit_type > sizeUnit_;
  nWay_optional nWay_;
  lineSize_optional lineSize_;
  lockDownType_optional lockDownType_;
};

class SystemConfiguration: public ::xml_schema::type
{
  public:
  // ComponentSet
  //
  typedef ::ComponentSet ComponentSet_type;
  typedef ::xsd::cxx::tree::traits< ComponentSet_type, char > ComponentSet_traits;

  const ComponentSet_type&
  ComponentSet () const;

  ComponentSet_type&
  ComponentSet ();

  void
  ComponentSet (const ComponentSet_type& x);

  void
  ComponentSet (::std::auto_ptr< ComponentSet_type > p);

  // CommunicationSet
  //
  typedef ::CommunicationSet CommunicationSet_type;
  typedef ::xsd::cxx::tree::optional< CommunicationSet_type > CommunicationSet_optional;
  typedef ::xsd::cxx::tree::traits< CommunicationSet_type, char > CommunicationSet_traits;

  const CommunicationSet_optional&
  CommunicationSet () const;

  CommunicationSet_optional&
  CommunicationSet ();

  void
  CommunicationSet (const CommunicationSet_type& x);

  void
  CommunicationSet (const CommunicationSet_optional& x);

  void
  CommunicationSet (::std::auto_ptr< CommunicationSet_type > p);

  // AddressSpaceSet
  //
  typedef ::AddressSpaceSet AddressSpaceSet_type;
  typedef ::xsd::cxx::tree::optional< AddressSpaceSet_type > AddressSpaceSet_optional;
  typedef ::xsd::cxx::tree::traits< AddressSpaceSet_type, char > AddressSpaceSet_traits;

  const AddressSpaceSet_optional&
  AddressSpaceSet () const;

  AddressSpaceSet_optional&
  AddressSpaceSet ();

  void
  AddressSpaceSet (const AddressSpaceSet_type& x);

  void
  AddressSpaceSet (const AddressSpaceSet_optional& x);

  void
  AddressSpaceSet (::std::auto_ptr< AddressSpaceSet_type > p);

  // ClockFrequency
  //
  typedef ::ClockFrequency ClockFrequency_type;
  typedef ::xsd::cxx::tree::traits< ClockFrequency_type, char > ClockFrequency_traits;

  const ClockFrequency_type&
  ClockFrequency () const;

  ClockFrequency_type&
  ClockFrequency ();

  void
  ClockFrequency (const ClockFrequency_type& x);

  void
  ClockFrequency (::std::auto_ptr< ClockFrequency_type > p);

  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // shimVersion
  //
  typedef ::xml_schema::string shimVersion_type;
  typedef ::xsd::cxx::tree::traits< shimVersion_type, char > shimVersion_traits;

  const shimVersion_type&
  shimVersion () const;

  shimVersion_type&
  shimVersion ();

  void
  shimVersion (const shimVersion_type& x);

  void
  shimVersion (::std::auto_ptr< shimVersion_type > p);

  // Constructors.
  //
  SystemConfiguration (const ComponentSet_type&,
                       const ClockFrequency_type&,
                       const name_type&,
                       const shimVersion_type&);

  SystemConfiguration (::std::auto_ptr< ComponentSet_type >,
                       ::std::auto_ptr< ClockFrequency_type >,
                       const name_type&,
                       const shimVersion_type&);

  SystemConfiguration (const ::xercesc::DOMElement& e,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  SystemConfiguration (const SystemConfiguration& x,
                       ::xml_schema::flags f = 0,
                       ::xml_schema::container* c = 0);

  virtual SystemConfiguration*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SystemConfiguration&
  operator= (const SystemConfiguration& x);

  virtual 
  ~SystemConfiguration ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< ComponentSet_type > ComponentSet_;
  CommunicationSet_optional CommunicationSet_;
  AddressSpaceSet_optional AddressSpaceSet_;
  ::xsd::cxx::tree::one< ClockFrequency_type > ClockFrequency_;
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< shimVersion_type > shimVersion_;
};

class ConnectionSet: public ::xml_schema::type
{
  public:
  // Connection
  //
  typedef ::Connection Connection_type;
  typedef ::xsd::cxx::tree::sequence< Connection_type > Connection_sequence;
  typedef Connection_sequence::iterator Connection_iterator;
  typedef Connection_sequence::const_iterator Connection_const_iterator;
  typedef ::xsd::cxx::tree::traits< Connection_type, char > Connection_traits;

  const Connection_sequence&
  Connection () const;

  Connection_sequence&
  Connection ();

  void
  Connection (const Connection_sequence& s);

  // Constructors.
  //
  ConnectionSet ();

  ConnectionSet (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  ConnectionSet (const ConnectionSet& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual ConnectionSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ConnectionSet&
  operator= (const ConnectionSet& x);

  virtual 
  ~ConnectionSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  Connection_sequence Connection_;
};

class CacheCoherencyType: public ::xml_schema::string
{
  public:
  enum value
  {
    SOFT,
    HARD
  };

  CacheCoherencyType (value v);

  CacheCoherencyType (const char* v);

  CacheCoherencyType (const ::std::string& v);

  CacheCoherencyType (const ::xml_schema::string& v);

  CacheCoherencyType (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  CacheCoherencyType (const ::xercesc::DOMAttr& a,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  CacheCoherencyType (const ::std::string& s,
                      const ::xercesc::DOMElement* e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  CacheCoherencyType (const CacheCoherencyType& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual CacheCoherencyType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  CacheCoherencyType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_CacheCoherencyType_convert ();
  }

  protected:
  value
  _xsd_CacheCoherencyType_convert () const;

  public:
  static const char* const _xsd_CacheCoherencyType_literals_[2];
  static const value _xsd_CacheCoherencyType_indexes_[2];
};

class MemoryConsistencyModel: public ::xml_schema::type
{
  public:
  // rawOrdering
  //
  typedef ::OrderingType rawOrdering_type;
  typedef ::xsd::cxx::tree::optional< rawOrdering_type > rawOrdering_optional;
  typedef ::xsd::cxx::tree::traits< rawOrdering_type, char > rawOrdering_traits;

  const rawOrdering_optional&
  rawOrdering () const;

  rawOrdering_optional&
  rawOrdering ();

  void
  rawOrdering (const rawOrdering_type& x);

  void
  rawOrdering (const rawOrdering_optional& x);

  void
  rawOrdering (::std::auto_ptr< rawOrdering_type > p);

  // warOrdering
  //
  typedef ::OrderingType warOrdering_type;
  typedef ::xsd::cxx::tree::optional< warOrdering_type > warOrdering_optional;
  typedef ::xsd::cxx::tree::traits< warOrdering_type, char > warOrdering_traits;

  const warOrdering_optional&
  warOrdering () const;

  warOrdering_optional&
  warOrdering ();

  void
  warOrdering (const warOrdering_type& x);

  void
  warOrdering (const warOrdering_optional& x);

  void
  warOrdering (::std::auto_ptr< warOrdering_type > p);

  // wawOrdering
  //
  typedef ::OrderingType wawOrdering_type;
  typedef ::xsd::cxx::tree::optional< wawOrdering_type > wawOrdering_optional;
  typedef ::xsd::cxx::tree::traits< wawOrdering_type, char > wawOrdering_traits;

  const wawOrdering_optional&
  wawOrdering () const;

  wawOrdering_optional&
  wawOrdering ();

  void
  wawOrdering (const wawOrdering_type& x);

  void
  wawOrdering (const wawOrdering_optional& x);

  void
  wawOrdering (::std::auto_ptr< wawOrdering_type > p);

  // rarOrdering
  //
  typedef ::OrderingType rarOrdering_type;
  typedef ::xsd::cxx::tree::optional< rarOrdering_type > rarOrdering_optional;
  typedef ::xsd::cxx::tree::traits< rarOrdering_type, char > rarOrdering_traits;

  const rarOrdering_optional&
  rarOrdering () const;

  rarOrdering_optional&
  rarOrdering ();

  void
  rarOrdering (const rarOrdering_type& x);

  void
  rarOrdering (const rarOrdering_optional& x);

  void
  rarOrdering (::std::auto_ptr< rarOrdering_type > p);

  // Constructors.
  //
  MemoryConsistencyModel ();

  MemoryConsistencyModel (const ::xercesc::DOMElement& e,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  MemoryConsistencyModel (const MemoryConsistencyModel& x,
                          ::xml_schema::flags f = 0,
                          ::xml_schema::container* c = 0);

  virtual MemoryConsistencyModel*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MemoryConsistencyModel&
  operator= (const MemoryConsistencyModel& x);

  virtual 
  ~MemoryConsistencyModel ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  rawOrdering_optional rawOrdering_;
  warOrdering_optional warOrdering_;
  wawOrdering_optional wawOrdering_;
  rarOrdering_optional rarOrdering_;
};

class OrderingType: public ::xml_schema::string
{
  public:
  enum value
  {
    ORDERD,
    UNORDERD
  };

  OrderingType (value v);

  OrderingType (const char* v);

  OrderingType (const ::std::string& v);

  OrderingType (const ::xml_schema::string& v);

  OrderingType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  OrderingType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  OrderingType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  OrderingType (const OrderingType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual OrderingType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  OrderingType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_OrderingType_convert ();
  }

  protected:
  value
  _xsd_OrderingType_convert () const;

  public:
  static const char* const _xsd_OrderingType_literals_[2];
  static const value _xsd_OrderingType_indexes_[2];
};

class EndianType: public ::xml_schema::string
{
  public:
  enum value
  {
    LITTLE,
    BIG
  };

  EndianType (value v);

  EndianType (const char* v);

  EndianType (const ::std::string& v);

  EndianType (const ::xml_schema::string& v);

  EndianType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  EndianType (const ::xercesc::DOMAttr& a,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  EndianType (const ::std::string& s,
              const ::xercesc::DOMElement* e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  EndianType (const EndianType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual EndianType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  EndianType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_EndianType_convert ();
  }

  protected:
  value
  _xsd_EndianType_convert () const;

  public:
  static const char* const _xsd_EndianType_literals_[2];
  static const value _xsd_EndianType_indexes_[2];
};

class SharedRegisterCommunication: public ::AbstractCommunication
{
  public:
  // dataSize
  //
  typedef ::xml_schema::int_ dataSize_type;
  typedef ::xsd::cxx::tree::traits< dataSize_type, char > dataSize_traits;

  const dataSize_type&
  dataSize () const;

  dataSize_type&
  dataSize ();

  void
  dataSize (const dataSize_type& x);

  // dataSizeUnit
  //
  typedef ::SizeUnitType dataSizeUnit_type;
  typedef ::xsd::cxx::tree::traits< dataSizeUnit_type, char > dataSizeUnit_traits;

  const dataSizeUnit_type&
  dataSizeUnit () const;

  dataSizeUnit_type&
  dataSizeUnit ();

  void
  dataSizeUnit (const dataSizeUnit_type& x);

  void
  dataSizeUnit (::std::auto_ptr< dataSizeUnit_type > p);

  // nRegister
  //
  typedef ::xml_schema::int_ nRegister_type;
  typedef ::xsd::cxx::tree::traits< nRegister_type, char > nRegister_traits;

  const nRegister_type&
  nRegister () const;

  nRegister_type&
  nRegister ();

  void
  nRegister (const nRegister_type& x);

  // Constructors.
  //
  SharedRegisterCommunication (const name_type&,
                               const dataSize_type&,
                               const dataSizeUnit_type&,
                               const nRegister_type&);

  SharedRegisterCommunication (const ::xercesc::DOMElement& e,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  SharedRegisterCommunication (const SharedRegisterCommunication& x,
                               ::xml_schema::flags f = 0,
                               ::xml_schema::container* c = 0);

  virtual SharedRegisterCommunication*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SharedRegisterCommunication&
  operator= (const SharedRegisterCommunication& x);

  virtual 
  ~SharedRegisterCommunication ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< dataSize_type > dataSize_;
  ::xsd::cxx::tree::one< dataSizeUnit_type > dataSizeUnit_;
  ::xsd::cxx::tree::one< nRegister_type > nRegister_;
};

class SharedMemoryCommunication: public ::AbstractCommunication
{
  public:
  // operationType
  //
  typedef ::OperationType operationType_type;
  typedef ::xsd::cxx::tree::optional< operationType_type > operationType_optional;
  typedef ::xsd::cxx::tree::traits< operationType_type, char > operationType_traits;

  const operationType_optional&
  operationType () const;

  operationType_optional&
  operationType ();

  void
  operationType (const operationType_type& x);

  void
  operationType (const operationType_optional& x);

  void
  operationType (::std::auto_ptr< operationType_type > p);

  // dataSize
  //
  typedef ::xml_schema::int_ dataSize_type;
  typedef ::xsd::cxx::tree::optional< dataSize_type > dataSize_optional;
  typedef ::xsd::cxx::tree::traits< dataSize_type, char > dataSize_traits;

  const dataSize_optional&
  dataSize () const;

  dataSize_optional&
  dataSize ();

  void
  dataSize (const dataSize_type& x);

  void
  dataSize (const dataSize_optional& x);

  // dataSizeUnit
  //
  typedef ::SizeUnitType dataSizeUnit_type;
  typedef ::xsd::cxx::tree::optional< dataSizeUnit_type > dataSizeUnit_optional;
  typedef ::xsd::cxx::tree::traits< dataSizeUnit_type, char > dataSizeUnit_traits;

  const dataSizeUnit_optional&
  dataSizeUnit () const;

  dataSizeUnit_optional&
  dataSizeUnit ();

  void
  dataSizeUnit (const dataSizeUnit_type& x);

  void
  dataSizeUnit (const dataSizeUnit_optional& x);

  void
  dataSizeUnit (::std::auto_ptr< dataSizeUnit_type > p);

  // addressSpaceRef
  //
  typedef ::xml_schema::idref addressSpaceRef_type;
  typedef ::xsd::cxx::tree::optional< addressSpaceRef_type > addressSpaceRef_optional;
  typedef ::xsd::cxx::tree::traits< addressSpaceRef_type, char > addressSpaceRef_traits;

  const addressSpaceRef_optional&
  addressSpaceRef () const;

  addressSpaceRef_optional&
  addressSpaceRef ();

  void
  addressSpaceRef (const addressSpaceRef_type& x);

  void
  addressSpaceRef (const addressSpaceRef_optional& x);

  void
  addressSpaceRef (::std::auto_ptr< addressSpaceRef_type > p);

  // subSpaceRef
  //
  typedef ::xml_schema::idref subSpaceRef_type;
  typedef ::xsd::cxx::tree::optional< subSpaceRef_type > subSpaceRef_optional;
  typedef ::xsd::cxx::tree::traits< subSpaceRef_type, char > subSpaceRef_traits;

  const subSpaceRef_optional&
  subSpaceRef () const;

  subSpaceRef_optional&
  subSpaceRef ();

  void
  subSpaceRef (const subSpaceRef_type& x);

  void
  subSpaceRef (const subSpaceRef_optional& x);

  void
  subSpaceRef (::std::auto_ptr< subSpaceRef_type > p);

  // Constructors.
  //
  SharedMemoryCommunication (const name_type&);

  SharedMemoryCommunication (const ::xercesc::DOMElement& e,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  SharedMemoryCommunication (const SharedMemoryCommunication& x,
                             ::xml_schema::flags f = 0,
                             ::xml_schema::container* c = 0);

  virtual SharedMemoryCommunication*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SharedMemoryCommunication&
  operator= (const SharedMemoryCommunication& x);

  virtual 
  ~SharedMemoryCommunication ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  operationType_optional operationType_;
  dataSize_optional dataSize_;
  dataSizeUnit_optional dataSizeUnit_;
  addressSpaceRef_optional addressSpaceRef_;
  subSpaceRef_optional subSpaceRef_;
};

class EventCommunication: public ::AbstractCommunication
{
  public:
  // Constructors.
  //
  EventCommunication (const name_type&);

  EventCommunication (const ::xercesc::DOMElement& e,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  EventCommunication (const EventCommunication& x,
                      ::xml_schema::flags f = 0,
                      ::xml_schema::container* c = 0);

  virtual EventCommunication*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~EventCommunication ();
};

class ClockFrequency: public ::xml_schema::type
{
  public:
  // clockValue
  //
  typedef ::xml_schema::float_ clockValue_type;
  typedef ::xsd::cxx::tree::traits< clockValue_type, char > clockValue_traits;

  const clockValue_type&
  clockValue () const;

  clockValue_type&
  clockValue ();

  void
  clockValue (const clockValue_type& x);

  // Constructors.
  //
  ClockFrequency (const clockValue_type&);

  ClockFrequency (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  ClockFrequency (const ClockFrequency& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual ClockFrequency*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  ClockFrequency&
  operator= (const ClockFrequency& x);

  virtual 
  ~ClockFrequency ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< clockValue_type > clockValue_;
};

class Accessor: public ::xml_schema::type
{
  public:
  // PerformanceSet
  //
  typedef ::PerformanceSet PerformanceSet_type;
  typedef ::xsd::cxx::tree::sequence< PerformanceSet_type > PerformanceSet_sequence;
  typedef PerformanceSet_sequence::iterator PerformanceSet_iterator;
  typedef PerformanceSet_sequence::const_iterator PerformanceSet_const_iterator;
  typedef ::xsd::cxx::tree::traits< PerformanceSet_type, char > PerformanceSet_traits;

  const PerformanceSet_sequence&
  PerformanceSet () const;

  PerformanceSet_sequence&
  PerformanceSet ();

  void
  PerformanceSet (const PerformanceSet_sequence& s);

  // masterComponentRef
  //
  typedef ::xml_schema::idref masterComponentRef_type;
  typedef ::xsd::cxx::tree::traits< masterComponentRef_type, char > masterComponentRef_traits;

  const masterComponentRef_type&
  masterComponentRef () const;

  masterComponentRef_type&
  masterComponentRef ();

  void
  masterComponentRef (const masterComponentRef_type& x);

  void
  masterComponentRef (::std::auto_ptr< masterComponentRef_type > p);

  // Constructors.
  //
  Accessor (const masterComponentRef_type&);

  Accessor (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  Accessor (const Accessor& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual Accessor*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Accessor&
  operator= (const Accessor& x);

  virtual 
  ~Accessor ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  PerformanceSet_sequence PerformanceSet_;
  ::xsd::cxx::tree::one< masterComponentRef_type > masterComponentRef_;
};

class AccessType: public ::xml_schema::type
{
  public:
  // name
  //
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // id
  //
  typedef ::xml_schema::id id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  void
  id (::std::auto_ptr< id_type > p);

  // rwType
  //
  typedef ::RWType rwType_type;
  typedef ::xsd::cxx::tree::optional< rwType_type > rwType_optional;
  typedef ::xsd::cxx::tree::traits< rwType_type, char > rwType_traits;

  const rwType_optional&
  rwType () const;

  rwType_optional&
  rwType ();

  void
  rwType (const rwType_type& x);

  void
  rwType (const rwType_optional& x);

  void
  rwType (::std::auto_ptr< rwType_type > p);

  // accessByteSize
  //
  typedef ::xml_schema::int_ accessByteSize_type;
  typedef ::xsd::cxx::tree::optional< accessByteSize_type > accessByteSize_optional;
  typedef ::xsd::cxx::tree::traits< accessByteSize_type, char > accessByteSize_traits;

  const accessByteSize_optional&
  accessByteSize () const;

  accessByteSize_optional&
  accessByteSize ();

  void
  accessByteSize (const accessByteSize_type& x);

  void
  accessByteSize (const accessByteSize_optional& x);

  // alignmentByteSize
  //
  typedef ::xml_schema::int_ alignmentByteSize_type;
  typedef ::xsd::cxx::tree::optional< alignmentByteSize_type > alignmentByteSize_optional;
  typedef ::xsd::cxx::tree::traits< alignmentByteSize_type, char > alignmentByteSize_traits;

  const alignmentByteSize_optional&
  alignmentByteSize () const;

  alignmentByteSize_optional&
  alignmentByteSize ();

  void
  alignmentByteSize (const alignmentByteSize_type& x);

  void
  alignmentByteSize (const alignmentByteSize_optional& x);

  // nBurst
  //
  typedef ::xml_schema::int_ nBurst_type;
  typedef ::xsd::cxx::tree::optional< nBurst_type > nBurst_optional;
  typedef ::xsd::cxx::tree::traits< nBurst_type, char > nBurst_traits;

  const nBurst_optional&
  nBurst () const;

  nBurst_optional&
  nBurst ();

  void
  nBurst (const nBurst_type& x);

  void
  nBurst (const nBurst_optional& x);

  // Constructors.
  //
  AccessType (const name_type&,
              const id_type&);

  AccessType (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  AccessType (const AccessType& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual AccessType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  AccessType&
  operator= (const AccessType& x);

  virtual 
  ~AccessType ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< id_type > id_;
  rwType_optional rwType_;
  accessByteSize_optional accessByteSize_;
  alignmentByteSize_optional alignmentByteSize_;
  nBurst_optional nBurst_;
};

class MasterSlaveBindingSet: public ::xml_schema::type
{
  public:
  // MasterSlaveBinding
  //
  typedef ::MasterSlaveBinding MasterSlaveBinding_type;
  typedef ::xsd::cxx::tree::sequence< MasterSlaveBinding_type > MasterSlaveBinding_sequence;
  typedef MasterSlaveBinding_sequence::iterator MasterSlaveBinding_iterator;
  typedef MasterSlaveBinding_sequence::const_iterator MasterSlaveBinding_const_iterator;
  typedef ::xsd::cxx::tree::traits< MasterSlaveBinding_type, char > MasterSlaveBinding_traits;

  const MasterSlaveBinding_sequence&
  MasterSlaveBinding () const;

  MasterSlaveBinding_sequence&
  MasterSlaveBinding ();

  void
  MasterSlaveBinding (const MasterSlaveBinding_sequence& s);

  // Constructors.
  //
  MasterSlaveBindingSet ();

  MasterSlaveBindingSet (const ::xercesc::DOMElement& e,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  MasterSlaveBindingSet (const MasterSlaveBindingSet& x,
                         ::xml_schema::flags f = 0,
                         ::xml_schema::container* c = 0);

  virtual MasterSlaveBindingSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  MasterSlaveBindingSet&
  operator= (const MasterSlaveBindingSet& x);

  virtual 
  ~MasterSlaveBindingSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  MasterSlaveBinding_sequence MasterSlaveBinding_;
};

class CacheType: public ::xml_schema::string
{
  public:
  enum value
  {
    DATA,
    INSTRUCTION,
    UNIFIED
  };

  CacheType (value v);

  CacheType (const char* v);

  CacheType (const ::std::string& v);

  CacheType (const ::xml_schema::string& v);

  CacheType (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  CacheType (const ::xercesc::DOMAttr& a,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  CacheType (const ::std::string& s,
             const ::xercesc::DOMElement* e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  CacheType (const CacheType& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual CacheType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  CacheType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_CacheType_convert ();
  }

  protected:
  value
  _xsd_CacheType_convert () const;

  public:
  static const char* const _xsd_CacheType_literals_[3];
  static const value _xsd_CacheType_indexes_[3];
};

class Performance: public ::xml_schema::type
{
  public:
  // Pitch
  //
  typedef ::Pitch Pitch_type;
  typedef ::xsd::cxx::tree::traits< Pitch_type, char > Pitch_traits;

  const Pitch_type&
  Pitch () const;

  Pitch_type&
  Pitch ();

  void
  Pitch (const Pitch_type& x);

  void
  Pitch (::std::auto_ptr< Pitch_type > p);

  // Latency
  //
  typedef ::Latency Latency_type;
  typedef ::xsd::cxx::tree::traits< Latency_type, char > Latency_traits;

  const Latency_type&
  Latency () const;

  Latency_type&
  Latency ();

  void
  Latency (const Latency_type& x);

  void
  Latency (::std::auto_ptr< Latency_type > p);

  // accessTypeRef
  //
  typedef ::xml_schema::idref accessTypeRef_type;
  typedef ::xsd::cxx::tree::optional< accessTypeRef_type > accessTypeRef_optional;
  typedef ::xsd::cxx::tree::traits< accessTypeRef_type, char > accessTypeRef_traits;

  const accessTypeRef_optional&
  accessTypeRef () const;

  accessTypeRef_optional&
  accessTypeRef ();

  void
  accessTypeRef (const accessTypeRef_type& x);

  void
  accessTypeRef (const accessTypeRef_optional& x);

  void
  accessTypeRef (::std::auto_ptr< accessTypeRef_type > p);

  // Constructors.
  //
  Performance (const Pitch_type&,
               const Latency_type&);

  Performance (::std::auto_ptr< Pitch_type >,
               ::std::auto_ptr< Latency_type >);

  Performance (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  Performance (const Performance& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual Performance*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  Performance&
  operator= (const Performance& x);

  virtual 
  ~Performance ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< Pitch_type > Pitch_;
  ::xsd::cxx::tree::one< Latency_type > Latency_;
  accessTypeRef_optional accessTypeRef_;
};

class AccessTypeSet: public ::xml_schema::type
{
  public:
  // AccessType
  //
  typedef ::AccessType AccessType_type;
  typedef ::xsd::cxx::tree::sequence< AccessType_type > AccessType_sequence;
  typedef AccessType_sequence::iterator AccessType_iterator;
  typedef AccessType_sequence::const_iterator AccessType_const_iterator;
  typedef ::xsd::cxx::tree::traits< AccessType_type, char > AccessType_traits;

  const AccessType_sequence&
  AccessType () const;

  AccessType_sequence&
  AccessType ();

  void
  AccessType (const AccessType_sequence& s);

  // Constructors.
  //
  AccessTypeSet ();

  AccessTypeSet (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  AccessTypeSet (const AccessTypeSet& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual AccessTypeSet*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  AccessTypeSet&
  operator= (const AccessTypeSet& x);

  virtual 
  ~AccessTypeSet ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  AccessType_sequence AccessType_;
};

class SizeUnitType: public ::xml_schema::string
{
  public:
  enum value
  {
    KiB,
    B,
    GiB,
    MiB,
    TiB
  };

  SizeUnitType (value v);

  SizeUnitType (const char* v);

  SizeUnitType (const ::std::string& v);

  SizeUnitType (const ::xml_schema::string& v);

  SizeUnitType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  SizeUnitType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  SizeUnitType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  SizeUnitType (const SizeUnitType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual SizeUnitType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  SizeUnitType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_SizeUnitType_convert ();
  }

  protected:
  value
  _xsd_SizeUnitType_convert () const;

  public:
  static const char* const _xsd_SizeUnitType_literals_[5];
  static const value _xsd_SizeUnitType_indexes_[5];
};

class LockDownType: public ::xml_schema::string
{
  public:
  enum value
  {
    LINE,
    NONE,
    WAY
  };

  LockDownType (value v);

  LockDownType (const char* v);

  LockDownType (const ::std::string& v);

  LockDownType (const ::xml_schema::string& v);

  LockDownType (const ::xercesc::DOMElement& e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  LockDownType (const ::xercesc::DOMAttr& a,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  LockDownType (const ::std::string& s,
                const ::xercesc::DOMElement* e,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  LockDownType (const LockDownType& x,
                ::xml_schema::flags f = 0,
                ::xml_schema::container* c = 0);

  virtual LockDownType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  LockDownType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_LockDownType_convert ();
  }

  protected:
  value
  _xsd_LockDownType_convert () const;

  public:
  static const char* const _xsd_LockDownType_literals_[3];
  static const value _xsd_LockDownType_indexes_[3];
};

class OperationType: public ::xml_schema::string
{
  public:
  enum value
  {
    TAS,
    LLSC,
    CAX,
    OTHER
  };

  OperationType (value v);

  OperationType (const char* v);

  OperationType (const ::std::string& v);

  OperationType (const ::xml_schema::string& v);

  OperationType (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  OperationType (const ::xercesc::DOMAttr& a,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  OperationType (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  OperationType (const OperationType& x,
                 ::xml_schema::flags f = 0,
                 ::xml_schema::container* c = 0);

  virtual OperationType*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  OperationType&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_OperationType_convert ();
  }

  protected:
  value
  _xsd_OperationType_convert () const;

  public:
  static const char* const _xsd_OperationType_literals_[4];
  static const value _xsd_OperationType_indexes_[4];
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::ComponentSet >
ComponentSet_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ComponentSet >
ComponentSet_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ComponentSet >
ComponentSet_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::ComponentSet >
ComponentSet_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ComponentSet >
ComponentSet_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ComponentSet >
ComponentSet_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ComponentSet >
ComponentSet_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ComponentSet >
ComponentSet_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ComponentSet >
ComponentSet_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::ComponentSet >
ComponentSet_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ComponentSet >
ComponentSet_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ComponentSet >
ComponentSet_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::ComponentSet >
ComponentSet_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ComponentSet >
ComponentSet_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::SlaveComponent >
SlaveComponent_ (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SlaveComponent >
SlaveComponent_ (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SlaveComponent >
SlaveComponent_ (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::SlaveComponent >
SlaveComponent_ (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SlaveComponent >
SlaveComponent_ (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SlaveComponent >
SlaveComponent_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SlaveComponent >
SlaveComponent_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SlaveComponent >
SlaveComponent_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SlaveComponent >
SlaveComponent_ (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::SlaveComponent >
SlaveComponent_ (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SlaveComponent >
SlaveComponent_ (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SlaveComponent >
SlaveComponent_ (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::SlaveComponent >
SlaveComponent_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SlaveComponent >
SlaveComponent_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::MasterComponent >
MasterComponent_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterComponent >
MasterComponent_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterComponent >
MasterComponent_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::MasterComponent >
MasterComponent_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterComponent >
MasterComponent_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterComponent >
MasterComponent_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterComponent >
MasterComponent_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterComponent >
MasterComponent_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterComponent >
MasterComponent_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::MasterComponent >
MasterComponent_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterComponent >
MasterComponent_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterComponent >
MasterComponent_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::MasterComponent >
MasterComponent_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterComponent >
MasterComponent_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::AddressSpaceSet >
AddressSpaceSet_ (const ::std::string& uri,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpaceSet >
AddressSpaceSet_ (const ::std::string& uri,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpaceSet >
AddressSpaceSet_ (const ::std::string& uri,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::AddressSpaceSet >
AddressSpaceSet_ (::std::istream& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpaceSet >
AddressSpaceSet_ (::std::istream& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpaceSet >
AddressSpaceSet_ (::std::istream& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpaceSet >
AddressSpaceSet_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpaceSet >
AddressSpaceSet_ (::std::istream& is,
                  const ::std::string& id,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpaceSet >
AddressSpaceSet_ (::std::istream& is,
                  const ::std::string& id,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::AddressSpaceSet >
AddressSpaceSet_ (::xercesc::InputSource& is,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpaceSet >
AddressSpaceSet_ (::xercesc::InputSource& is,
                  ::xml_schema::error_handler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpaceSet >
AddressSpaceSet_ (::xercesc::InputSource& is,
                  ::xercesc::DOMErrorHandler& eh,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::AddressSpaceSet >
AddressSpaceSet_ (const ::xercesc::DOMDocument& d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpaceSet >
AddressSpaceSet_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                  ::xml_schema::flags f = 0,
                  const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::AddressSpace >
AddressSpace_ (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpace >
AddressSpace_ (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpace >
AddressSpace_ (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::AddressSpace >
AddressSpace_ (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpace >
AddressSpace_ (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpace >
AddressSpace_ (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpace >
AddressSpace_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpace >
AddressSpace_ (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpace >
AddressSpace_ (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::AddressSpace >
AddressSpace_ (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpace >
AddressSpace_ (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpace >
AddressSpace_ (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::AddressSpace >
AddressSpace_ (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AddressSpace >
AddressSpace_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::SubSpace >
SubSpace_ (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubSpace >
SubSpace_ (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubSpace >
SubSpace_ (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::SubSpace >
SubSpace_ (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubSpace >
SubSpace_ (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubSpace >
SubSpace_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubSpace >
SubSpace_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubSpace >
SubSpace_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubSpace >
SubSpace_ (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::SubSpace >
SubSpace_ (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubSpace >
SubSpace_ (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubSpace >
SubSpace_ (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::SubSpace >
SubSpace_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SubSpace >
SubSpace_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::Instruction >
Instruction_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Instruction >
Instruction_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Instruction >
Instruction_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::Instruction >
Instruction_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Instruction >
Instruction_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Instruction >
Instruction_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Instruction >
Instruction_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Instruction >
Instruction_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Instruction >
Instruction_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::Instruction >
Instruction_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Instruction >
Instruction_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Instruction >
Instruction_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::Instruction >
Instruction_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Instruction >
Instruction_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::InterruptCommunication >
InterruptCommunication_ (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::InterruptCommunication >
InterruptCommunication_ (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::InterruptCommunication >
InterruptCommunication_ (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::InterruptCommunication >
InterruptCommunication_ (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::InterruptCommunication >
InterruptCommunication_ (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::InterruptCommunication >
InterruptCommunication_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::InterruptCommunication >
InterruptCommunication_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::InterruptCommunication >
InterruptCommunication_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::InterruptCommunication >
InterruptCommunication_ (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::InterruptCommunication >
InterruptCommunication_ (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::InterruptCommunication >
InterruptCommunication_ (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::InterruptCommunication >
InterruptCommunication_ (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::InterruptCommunication >
InterruptCommunication_ (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::InterruptCommunication >
InterruptCommunication_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::Latency >
Latency_ (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Latency >
Latency_ (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Latency >
Latency_ (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::Latency >
Latency_ (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Latency >
Latency_ (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Latency >
Latency_ (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Latency >
Latency_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Latency >
Latency_ (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Latency >
Latency_ (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::Latency >
Latency_ (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Latency >
Latency_ (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Latency >
Latency_ (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::Latency >
Latency_ (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Latency >
Latency_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::AbstractPerformance >
AbstractPerformance_ (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractPerformance >
AbstractPerformance_ (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractPerformance >
AbstractPerformance_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::AbstractPerformance >
AbstractPerformance_ (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractPerformance >
AbstractPerformance_ (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractPerformance >
AbstractPerformance_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractPerformance >
AbstractPerformance_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractPerformance >
AbstractPerformance_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractPerformance >
AbstractPerformance_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::AbstractPerformance >
AbstractPerformance_ (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractPerformance >
AbstractPerformance_ (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractPerformance >
AbstractPerformance_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::AbstractPerformance >
AbstractPerformance_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractPerformance >
AbstractPerformance_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::Pitch >
Pitch_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Pitch >
Pitch_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Pitch >
Pitch_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::Pitch >
Pitch_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Pitch >
Pitch_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Pitch >
Pitch_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Pitch >
Pitch_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Pitch >
Pitch_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Pitch >
Pitch_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::Pitch >
Pitch_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Pitch >
Pitch_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Pitch >
Pitch_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::Pitch >
Pitch_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Pitch >
Pitch_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::MasterSlaveBinding >
MasterSlaveBinding_ (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBinding >
MasterSlaveBinding_ (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBinding >
MasterSlaveBinding_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::MasterSlaveBinding >
MasterSlaveBinding_ (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBinding >
MasterSlaveBinding_ (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBinding >
MasterSlaveBinding_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBinding >
MasterSlaveBinding_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBinding >
MasterSlaveBinding_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBinding >
MasterSlaveBinding_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::MasterSlaveBinding >
MasterSlaveBinding_ (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBinding >
MasterSlaveBinding_ (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBinding >
MasterSlaveBinding_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::MasterSlaveBinding >
MasterSlaveBinding_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBinding >
MasterSlaveBinding_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::CommunicationSet >
CommunicationSet_ (const ::std::string& uri,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommunicationSet >
CommunicationSet_ (const ::std::string& uri,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommunicationSet >
CommunicationSet_ (const ::std::string& uri,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::CommunicationSet >
CommunicationSet_ (::std::istream& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommunicationSet >
CommunicationSet_ (::std::istream& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommunicationSet >
CommunicationSet_ (::std::istream& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommunicationSet >
CommunicationSet_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommunicationSet >
CommunicationSet_ (::std::istream& is,
                   const ::std::string& id,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommunicationSet >
CommunicationSet_ (::std::istream& is,
                   const ::std::string& id,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::CommunicationSet >
CommunicationSet_ (::xercesc::InputSource& is,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommunicationSet >
CommunicationSet_ (::xercesc::InputSource& is,
                   ::xml_schema::error_handler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommunicationSet >
CommunicationSet_ (::xercesc::InputSource& is,
                   ::xercesc::DOMErrorHandler& eh,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::CommunicationSet >
CommunicationSet_ (const ::xercesc::DOMDocument& d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommunicationSet >
CommunicationSet_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                   ::xml_schema::flags f = 0,
                   const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::AbstractCommunication >
AbstractCommunication_ (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractCommunication >
AbstractCommunication_ (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractCommunication >
AbstractCommunication_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::AbstractCommunication >
AbstractCommunication_ (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractCommunication >
AbstractCommunication_ (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractCommunication >
AbstractCommunication_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractCommunication >
AbstractCommunication_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractCommunication >
AbstractCommunication_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractCommunication >
AbstractCommunication_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::AbstractCommunication >
AbstractCommunication_ (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractCommunication >
AbstractCommunication_ (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractCommunication >
AbstractCommunication_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::AbstractCommunication >
AbstractCommunication_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AbstractCommunication >
AbstractCommunication_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::Connection >
Connection_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Connection >
Connection_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Connection >
Connection_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::Connection >
Connection_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Connection >
Connection_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Connection >
Connection_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Connection >
Connection_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Connection >
Connection_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Connection >
Connection_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::Connection >
Connection_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Connection >
Connection_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Connection >
Connection_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::Connection >
Connection_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Connection >
Connection_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::PerformanceSet >
PerformanceSet_ (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PerformanceSet >
PerformanceSet_ (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PerformanceSet >
PerformanceSet_ (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::PerformanceSet >
PerformanceSet_ (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PerformanceSet >
PerformanceSet_ (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PerformanceSet >
PerformanceSet_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PerformanceSet >
PerformanceSet_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PerformanceSet >
PerformanceSet_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PerformanceSet >
PerformanceSet_ (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::PerformanceSet >
PerformanceSet_ (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PerformanceSet >
PerformanceSet_ (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PerformanceSet >
PerformanceSet_ (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::PerformanceSet >
PerformanceSet_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::PerformanceSet >
PerformanceSet_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::FIFOCommunication >
FIFOCommunication_ (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::FIFOCommunication >
FIFOCommunication_ (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::FIFOCommunication >
FIFOCommunication_ (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::FIFOCommunication >
FIFOCommunication_ (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::FIFOCommunication >
FIFOCommunication_ (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::FIFOCommunication >
FIFOCommunication_ (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::FIFOCommunication >
FIFOCommunication_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::FIFOCommunication >
FIFOCommunication_ (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::FIFOCommunication >
FIFOCommunication_ (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::FIFOCommunication >
FIFOCommunication_ (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::FIFOCommunication >
FIFOCommunication_ (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::FIFOCommunication >
FIFOCommunication_ (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::FIFOCommunication >
FIFOCommunication_ (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::FIFOCommunication >
FIFOCommunication_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::CommonInstructionSet >
CommonInstructionSet_ (const ::std::string& uri,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommonInstructionSet >
CommonInstructionSet_ (const ::std::string& uri,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommonInstructionSet >
CommonInstructionSet_ (const ::std::string& uri,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::CommonInstructionSet >
CommonInstructionSet_ (::std::istream& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommonInstructionSet >
CommonInstructionSet_ (::std::istream& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommonInstructionSet >
CommonInstructionSet_ (::std::istream& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommonInstructionSet >
CommonInstructionSet_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommonInstructionSet >
CommonInstructionSet_ (::std::istream& is,
                       const ::std::string& id,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommonInstructionSet >
CommonInstructionSet_ (::std::istream& is,
                       const ::std::string& id,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::CommonInstructionSet >
CommonInstructionSet_ (::xercesc::InputSource& is,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommonInstructionSet >
CommonInstructionSet_ (::xercesc::InputSource& is,
                       ::xml_schema::error_handler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommonInstructionSet >
CommonInstructionSet_ (::xercesc::InputSource& is,
                       ::xercesc::DOMErrorHandler& eh,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::CommonInstructionSet >
CommonInstructionSet_ (const ::xercesc::DOMDocument& d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::CommonInstructionSet >
CommonInstructionSet_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                       ::xml_schema::flags f = 0,
                       const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::Cache >
Cache_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Cache >
Cache_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Cache >
Cache_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::Cache >
Cache_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Cache >
Cache_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Cache >
Cache_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Cache >
Cache_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Cache >
Cache_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Cache >
Cache_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::Cache >
Cache_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Cache >
Cache_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Cache >
Cache_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::Cache >
Cache_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Cache >
Cache_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::SystemConfiguration >
SystemConfiguration_ (const ::std::string& uri,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SystemConfiguration >
SystemConfiguration_ (const ::std::string& uri,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SystemConfiguration >
SystemConfiguration_ (const ::std::string& uri,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::SystemConfiguration >
SystemConfiguration_ (::std::istream& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SystemConfiguration >
SystemConfiguration_ (::std::istream& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SystemConfiguration >
SystemConfiguration_ (::std::istream& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SystemConfiguration >
SystemConfiguration_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SystemConfiguration >
SystemConfiguration_ (::std::istream& is,
                      const ::std::string& id,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SystemConfiguration >
SystemConfiguration_ (::std::istream& is,
                      const ::std::string& id,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::SystemConfiguration >
SystemConfiguration_ (::xercesc::InputSource& is,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SystemConfiguration >
SystemConfiguration_ (::xercesc::InputSource& is,
                      ::xml_schema::error_handler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SystemConfiguration >
SystemConfiguration_ (::xercesc::InputSource& is,
                      ::xercesc::DOMErrorHandler& eh,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::SystemConfiguration >
SystemConfiguration_ (const ::xercesc::DOMDocument& d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SystemConfiguration >
SystemConfiguration_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                      ::xml_schema::flags f = 0,
                      const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::ConnectionSet >
ConnectionSet_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ConnectionSet >
ConnectionSet_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ConnectionSet >
ConnectionSet_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::ConnectionSet >
ConnectionSet_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ConnectionSet >
ConnectionSet_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ConnectionSet >
ConnectionSet_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ConnectionSet >
ConnectionSet_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ConnectionSet >
ConnectionSet_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ConnectionSet >
ConnectionSet_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::ConnectionSet >
ConnectionSet_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ConnectionSet >
ConnectionSet_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ConnectionSet >
ConnectionSet_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::ConnectionSet >
ConnectionSet_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ConnectionSet >
ConnectionSet_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::MemoryConsistencyModel >
MemoryConsistencyModel_ (const ::std::string& uri,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MemoryConsistencyModel >
MemoryConsistencyModel_ (const ::std::string& uri,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MemoryConsistencyModel >
MemoryConsistencyModel_ (const ::std::string& uri,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::MemoryConsistencyModel >
MemoryConsistencyModel_ (::std::istream& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MemoryConsistencyModel >
MemoryConsistencyModel_ (::std::istream& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MemoryConsistencyModel >
MemoryConsistencyModel_ (::std::istream& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MemoryConsistencyModel >
MemoryConsistencyModel_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MemoryConsistencyModel >
MemoryConsistencyModel_ (::std::istream& is,
                         const ::std::string& id,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MemoryConsistencyModel >
MemoryConsistencyModel_ (::std::istream& is,
                         const ::std::string& id,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::MemoryConsistencyModel >
MemoryConsistencyModel_ (::xercesc::InputSource& is,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MemoryConsistencyModel >
MemoryConsistencyModel_ (::xercesc::InputSource& is,
                         ::xml_schema::error_handler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MemoryConsistencyModel >
MemoryConsistencyModel_ (::xercesc::InputSource& is,
                         ::xercesc::DOMErrorHandler& eh,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::MemoryConsistencyModel >
MemoryConsistencyModel_ (const ::xercesc::DOMDocument& d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MemoryConsistencyModel >
MemoryConsistencyModel_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                         ::xml_schema::flags f = 0,
                         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::SharedRegisterCommunication >
SharedRegisterCommunication_ (const ::std::string& uri,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedRegisterCommunication >
SharedRegisterCommunication_ (const ::std::string& uri,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedRegisterCommunication >
SharedRegisterCommunication_ (const ::std::string& uri,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::SharedRegisterCommunication >
SharedRegisterCommunication_ (::std::istream& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedRegisterCommunication >
SharedRegisterCommunication_ (::std::istream& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedRegisterCommunication >
SharedRegisterCommunication_ (::std::istream& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedRegisterCommunication >
SharedRegisterCommunication_ (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedRegisterCommunication >
SharedRegisterCommunication_ (::std::istream& is,
                              const ::std::string& id,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedRegisterCommunication >
SharedRegisterCommunication_ (::std::istream& is,
                              const ::std::string& id,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::SharedRegisterCommunication >
SharedRegisterCommunication_ (::xercesc::InputSource& is,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedRegisterCommunication >
SharedRegisterCommunication_ (::xercesc::InputSource& is,
                              ::xml_schema::error_handler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedRegisterCommunication >
SharedRegisterCommunication_ (::xercesc::InputSource& is,
                              ::xercesc::DOMErrorHandler& eh,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::SharedRegisterCommunication >
SharedRegisterCommunication_ (const ::xercesc::DOMDocument& d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedRegisterCommunication >
SharedRegisterCommunication_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                              ::xml_schema::flags f = 0,
                              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::SharedMemoryCommunication >
SharedMemoryCommunication_ (const ::std::string& uri,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedMemoryCommunication >
SharedMemoryCommunication_ (const ::std::string& uri,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedMemoryCommunication >
SharedMemoryCommunication_ (const ::std::string& uri,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::SharedMemoryCommunication >
SharedMemoryCommunication_ (::std::istream& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedMemoryCommunication >
SharedMemoryCommunication_ (::std::istream& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedMemoryCommunication >
SharedMemoryCommunication_ (::std::istream& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedMemoryCommunication >
SharedMemoryCommunication_ (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedMemoryCommunication >
SharedMemoryCommunication_ (::std::istream& is,
                            const ::std::string& id,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedMemoryCommunication >
SharedMemoryCommunication_ (::std::istream& is,
                            const ::std::string& id,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::SharedMemoryCommunication >
SharedMemoryCommunication_ (::xercesc::InputSource& is,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedMemoryCommunication >
SharedMemoryCommunication_ (::xercesc::InputSource& is,
                            ::xml_schema::error_handler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedMemoryCommunication >
SharedMemoryCommunication_ (::xercesc::InputSource& is,
                            ::xercesc::DOMErrorHandler& eh,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::SharedMemoryCommunication >
SharedMemoryCommunication_ (const ::xercesc::DOMDocument& d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::SharedMemoryCommunication >
SharedMemoryCommunication_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                            ::xml_schema::flags f = 0,
                            const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::EventCommunication >
EventCommunication_ (const ::std::string& uri,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::EventCommunication >
EventCommunication_ (const ::std::string& uri,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::EventCommunication >
EventCommunication_ (const ::std::string& uri,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::EventCommunication >
EventCommunication_ (::std::istream& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::EventCommunication >
EventCommunication_ (::std::istream& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::EventCommunication >
EventCommunication_ (::std::istream& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::EventCommunication >
EventCommunication_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::EventCommunication >
EventCommunication_ (::std::istream& is,
                     const ::std::string& id,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::EventCommunication >
EventCommunication_ (::std::istream& is,
                     const ::std::string& id,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::EventCommunication >
EventCommunication_ (::xercesc::InputSource& is,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::EventCommunication >
EventCommunication_ (::xercesc::InputSource& is,
                     ::xml_schema::error_handler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::EventCommunication >
EventCommunication_ (::xercesc::InputSource& is,
                     ::xercesc::DOMErrorHandler& eh,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::EventCommunication >
EventCommunication_ (const ::xercesc::DOMDocument& d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::EventCommunication >
EventCommunication_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                     ::xml_schema::flags f = 0,
                     const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::ClockFrequency >
ClockFrequency_ (const ::std::string& uri,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ClockFrequency >
ClockFrequency_ (const ::std::string& uri,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ClockFrequency >
ClockFrequency_ (const ::std::string& uri,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::ClockFrequency >
ClockFrequency_ (::std::istream& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ClockFrequency >
ClockFrequency_ (::std::istream& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ClockFrequency >
ClockFrequency_ (::std::istream& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ClockFrequency >
ClockFrequency_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ClockFrequency >
ClockFrequency_ (::std::istream& is,
                 const ::std::string& id,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ClockFrequency >
ClockFrequency_ (::std::istream& is,
                 const ::std::string& id,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::ClockFrequency >
ClockFrequency_ (::xercesc::InputSource& is,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ClockFrequency >
ClockFrequency_ (::xercesc::InputSource& is,
                 ::xml_schema::error_handler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ClockFrequency >
ClockFrequency_ (::xercesc::InputSource& is,
                 ::xercesc::DOMErrorHandler& eh,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::ClockFrequency >
ClockFrequency_ (const ::xercesc::DOMDocument& d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::ClockFrequency >
ClockFrequency_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                 ::xml_schema::flags f = 0,
                 const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::Accessor >
Accessor_ (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Accessor >
Accessor_ (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Accessor >
Accessor_ (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::Accessor >
Accessor_ (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Accessor >
Accessor_ (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Accessor >
Accessor_ (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Accessor >
Accessor_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Accessor >
Accessor_ (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Accessor >
Accessor_ (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::Accessor >
Accessor_ (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Accessor >
Accessor_ (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Accessor >
Accessor_ (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::Accessor >
Accessor_ (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Accessor >
Accessor_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::AccessType >
AccessType_ (const ::std::string& uri,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessType >
AccessType_ (const ::std::string& uri,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessType >
AccessType_ (const ::std::string& uri,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::AccessType >
AccessType_ (::std::istream& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessType >
AccessType_ (::std::istream& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessType >
AccessType_ (::std::istream& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessType >
AccessType_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessType >
AccessType_ (::std::istream& is,
             const ::std::string& id,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessType >
AccessType_ (::std::istream& is,
             const ::std::string& id,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::AccessType >
AccessType_ (::xercesc::InputSource& is,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessType >
AccessType_ (::xercesc::InputSource& is,
             ::xml_schema::error_handler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessType >
AccessType_ (::xercesc::InputSource& is,
             ::xercesc::DOMErrorHandler& eh,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::AccessType >
AccessType_ (const ::xercesc::DOMDocument& d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessType >
AccessType_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::flags f = 0,
             const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::MasterSlaveBindingSet >
MasterSlaveBindingSet_ (const ::std::string& uri,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBindingSet >
MasterSlaveBindingSet_ (const ::std::string& uri,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBindingSet >
MasterSlaveBindingSet_ (const ::std::string& uri,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::MasterSlaveBindingSet >
MasterSlaveBindingSet_ (::std::istream& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBindingSet >
MasterSlaveBindingSet_ (::std::istream& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBindingSet >
MasterSlaveBindingSet_ (::std::istream& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBindingSet >
MasterSlaveBindingSet_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBindingSet >
MasterSlaveBindingSet_ (::std::istream& is,
                        const ::std::string& id,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBindingSet >
MasterSlaveBindingSet_ (::std::istream& is,
                        const ::std::string& id,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::MasterSlaveBindingSet >
MasterSlaveBindingSet_ (::xercesc::InputSource& is,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBindingSet >
MasterSlaveBindingSet_ (::xercesc::InputSource& is,
                        ::xml_schema::error_handler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBindingSet >
MasterSlaveBindingSet_ (::xercesc::InputSource& is,
                        ::xercesc::DOMErrorHandler& eh,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::MasterSlaveBindingSet >
MasterSlaveBindingSet_ (const ::xercesc::DOMDocument& d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::MasterSlaveBindingSet >
MasterSlaveBindingSet_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                        ::xml_schema::flags f = 0,
                        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::Performance >
Performance_ (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Performance >
Performance_ (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Performance >
Performance_ (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::Performance >
Performance_ (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Performance >
Performance_ (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Performance >
Performance_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Performance >
Performance_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Performance >
Performance_ (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Performance >
Performance_ (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::Performance >
Performance_ (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Performance >
Performance_ (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Performance >
Performance_ (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::Performance >
Performance_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::Performance >
Performance_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::AccessTypeSet >
AccessTypeSet_ (const ::std::string& uri,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessTypeSet >
AccessTypeSet_ (const ::std::string& uri,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessTypeSet >
AccessTypeSet_ (const ::std::string& uri,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::AccessTypeSet >
AccessTypeSet_ (::std::istream& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessTypeSet >
AccessTypeSet_ (::std::istream& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessTypeSet >
AccessTypeSet_ (::std::istream& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessTypeSet >
AccessTypeSet_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessTypeSet >
AccessTypeSet_ (::std::istream& is,
                const ::std::string& id,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessTypeSet >
AccessTypeSet_ (::std::istream& is,
                const ::std::string& id,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::AccessTypeSet >
AccessTypeSet_ (::xercesc::InputSource& is,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessTypeSet >
AccessTypeSet_ (::xercesc::InputSource& is,
                ::xml_schema::error_handler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessTypeSet >
AccessTypeSet_ (::xercesc::InputSource& is,
                ::xercesc::DOMErrorHandler& eh,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::AccessTypeSet >
AccessTypeSet_ (const ::xercesc::DOMDocument& d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::AccessTypeSet >
AccessTypeSet_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::flags f = 0,
                const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // SHIM_HXX
